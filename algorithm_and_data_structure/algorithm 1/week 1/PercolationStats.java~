import edu.princeton.cs.algs4.StdStats;
import edu.princeton.cs.algs4.StdRandom;

public class PercolationStats {
    private double[] x;
    private int T;
    public PercolationStats(int n, int trials) { // perform trials independent experiments on an n-by-n grid
	if (n <= 0 || trials <= 0) {
	    throw new IllegalArgumentException("invalid experiments");
	} else {
	    T = trials;
	    x = new double[trials];
	    for (int i = 0; i < trials; i++) {
		Percolation percolation = new Percolation(n);
		while (!percolation.percolates()) {
		    percolation.open(StdRandom.uniform(n)+1,StdRandom.uniform(n)+1);
		}
		x[i] = percolation.numberOfOpenSites()*1.0/(n*n);
	    }
	}
    }
    public double mean() { // sample mean of percolation threshold
	return StdStats.mean(x);
    }
    public double stddev() { // sample standard deviation of percolation threshold
	return StdStats.stddev(x);
    }
    public double confidenceLo() { // low endpoint of 95% confidence interval
	return mean()-1.96*stddev()/Math.sqrt(T);
    }
    public double confidenceHi() { // high endpoint of 95% confidence interval
	return mean()+1.96*stddev()/Math.sqrt(T);
    }
    public static void main(String[] args) { // test client (described below)
	PercolationStats stats = new PercolationStats(new Integer(args[0]).intValue(), new Integer(args[1]).intValue());
	
    }
}
